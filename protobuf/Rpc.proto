// @project        The CERN Tape Archive (CTA)
// @brief          CTA-EOS gRPC API for CASTOR-EOS migration
// @copyright      Copyright 2019 CERN
// @license        This program is free software: you can redistribute it and/or modify
//                 it under the terms of the GNU General Public License as published by
//                 the Free Software Foundation, either version 3 of the License, or
//                 (at your option) any later version.
//
//                 This program is distributed in the hope that it will be useful,
//                 but WITHOUT ANY WARRANTY; without even the implied warranty of
//                 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                 GNU General Public License for more details.
//
//                 You should have received a copy of the GNU General Public License
//                 along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package eos.rpc;

option java_multiple_files = true;
option java_package = "io.grpc.eos.rpc";
option java_outer_classname = "EosProto";
option objc_class_prefix = "EOS";

service Eos {
  // Replies to a ping
  rpc Ping (PingRequest) returns (PingReply) {}  

  // ---------------------------------------------------------------------
  // NAMESPACE
  // ---------------------------------------------------------------------

  // Replies to MD requests with a stream 
  rpc MD (MDRequest) returns (stream MDResponse) {}

  // Replies to Find requests with a stream
  rpc Find (FindRequest) returns (stream MDResponse) {}

  // Replies to an insert
  rpc ContainerInsert (ContainerInsertRequest) returns (InsertReply) {}  
  rpc FileInsert (FileInsertRequest) returns (InsertReply) {}  


  rpc Exec (NSRequest) returns (NSResponse) {}

  // ---------------------------------------------------------------------
  // OPENSTACK
  // ---------------------------------------------------------------------

  // Manila Driver
  rpc ManilaServerRequest (ManilaRequest) returns (ManilaResponse) {}  
}

message PingRequest {
  string authkey = 1;
  bytes message = 2;
}

message PingReply {
  bytes message = 1;
}

// ---------------------------------------------------------------------
// NAMESPACE
// ---------------------------------------------------------------------

message ContainerInsertRequest {
  repeated ContainerMdProto container = 1;
  string authkey = 2;
}

message FileInsertRequest {
  repeated FileMdProto files = 1;
  string authkey = 2;
}

message InsertReply {
  repeated string message = 1;
  repeated uint32 retc = 2;
}

message Time {
  uint64 sec = 1;
  uint64 n_sec = 2;
}

message Checksum {
  bytes value = 1;
  string type = 2;
}

message FileMdProto {
  uint64 id = 1;
  uint64 cont_id = 2;
  uint64 uid = 3;
  uint64 gid = 4;
  uint64 size = 5;
  uint32 layout_id = 6;
  uint32 flags = 7;
  bytes name = 8;
  bytes link_name = 9;
  Time ctime = 10; // change time
  Time mtime = 11; // modification time
  Checksum checksum =12;
  repeated uint32 locations = 13;
  repeated uint32 unlink_locations = 14;
  map<string, bytes> xattrs = 15;
  bytes path = 16;
}

message ContainerMdProto {
  uint64 id = 1;
  uint64 parent_id = 2;
  uint64 uid = 3;
  uint64 gid = 4;
  int64 tree_size = 6;
  uint32 mode = 5;
  uint32 flags = 7;
  bytes name = 8;
  Time ctime = 9;  // change time
  Time mtime = 10; // modification time
  Time stime = 11; // sync time
  map<string, bytes> xattrs = 12;
  bytes path = 13;
}

enum TYPE { FILE = 0; CONTAINER = 1; LISTING = 2;}  

message RoleId {
  uint64 uid = 1;
  uint64 gid = 2;
  string username = 3;
  string groupname = 4;
}

message MDId {
  bytes path = 1;
  fixed64 id = 2;
  fixed64 ino = 3;
  TYPE type = 4;
}

message MDRequest {
  TYPE type = 1;
  MDId id = 2;
  string authkey = 3;
  RoleId role = 4;
}

message MDResponse {
  TYPE type = 1;
  FileMdProto fmd = 2;
  ContainerMdProto cmd = 3;
}

message FindRequest {
  TYPE type = 1;
  MDId id = 2;
  RoleId role = 3;	
  string authkey = 4;
  uint64 maxdepth = 5;
}

message NSRequest {
  message MkdirRequest {
    MDId id = 1;
    bool recursive = 2;
    int64 mode = 3;
  }
  
  message RmdirRequest {
    MDId id = 1;
  }
 
  message TouchRequest {
    MDId id = 1;
  }

  message UnlinkRequest {
    MDId id = 1;
    bool norecycle = 3;
  }

  message RmRequest {
    MDId id = 1;
    bool recursive = 2;
    bool norecycle = 3;
  }

  message RenameRequest {
    MDId id = 1;
    bytes target = 2;
  }

  message SymlinkRequest {
    MDId id = 1;
    bytes target = 2;
  }

  message VersionRequest {
    MDId id = 1;
  }

  message RecycleRequest {
    MDId id = 1;
  }

  message SetXAttrRequest {
    MDId id = 1;
    map<string, bytes> xattrs = 2;
    bool recursive = 3;
  }

  message ChownRequest {
    MDId id = 1;
    RoleId owner = 2;  
  }

  message ChmodRequest {
    MDId id = 1;
    int64 mode = 2;
  }

  string authkey = 1;
  RoleId role = 2;
  // Actual request data object
  oneof command {
    MkdirRequest mkdir       = 21;
    RmdirRequest rmdir       = 22;
    TouchRequest touch       = 23;
    UnlinkRequest unlink     = 24;
    RmRequest rm             = 25;
    RenameRequest rename     = 26;
    SymlinkRequest symlink   = 27;
    VersionRequest version   = 28;
    RecycleRequest recycle   = 29;
    SetXAttrRequest xattr    = 30;
    ChownRequest chown       = 31;
    ChmodRequest chmod       = 32;
  }
}


message NSResponse 
{
  message ErrorResponse {
    int64 code = 1;
    string msg = 2;	
  }

  message VersionResponse {
    int64 code = 1;
    string msg = 2;	
  }

  message RecycleResponse {
    int64 code = 1;
    string msg = 2;	
  }

  ErrorResponse       error = 1;
  VersionResponse     version = 2;
  RecycleResponse     recycle = 3;
}

// ---------------------------------------------------------------------	
// OPENSTACK
// ---------------------------------------------------------------------

enum MANILA_REQUEST_TYPE {
   CREATE_SHARE = 0;
   DELETE_SHARE = 1;
   EXTEND_SHARE = 2;
   SHRINK_SHARE = 3;
   MANAGE_EXISTING = 4;
   UNMANAGE = 5;
   GET_CAPACITIES = 6;
}

message ManilaRequest {
   MANILA_REQUEST_TYPE request_type = 1;
   string auth_key = 2;
   string protocol = 3;
   string share_name = 4;
   string description = 5;
   string share_id = 6;
   string share_group_id = 7;
   int32 quota = 8;
   string creator = 9;
   string egroup = 10;
   string admin_egroup = 11;
   string share_location = 12;
}

message ManilaResponse {
   string msg = 1; //for generic messages
   int32 code = 2; // < 1 is an error -- > 1 is OK
   int64 total_used = 3;
   int64 total_capacity = 4;
   int64 new_share_quota = 5;
   string new_share_path = 6;

}

